worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server_tokens off;

    # Configuración de rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=admin_limit:10m rate=5r/s;

    # Configuración de upstream con load balancing
    upstream user_service {
        # Configuración de balanceador de carga
        least_conn;  # Algoritmo: envía solicitudes al servidor con menos conexiones
        
        # Réplicas del user-service (instancias separadas)
        server user-service-1:5000 max_fails=3 fail_timeout=30s weight=1;
        server user-service-2:5000 max_fails=3 fail_timeout=30s weight=1;
        
        # Configuración de keepalive para reutilizar conexiones
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream task_service {
        # Configuración de balanceador de carga
        least_conn;  # Algoritmo: envía solicitudes al servidor con menos conexiones
        
        # Réplicas del task-service (instancias separadas)
        server task-service-1:5001 max_fails=3 fail_timeout=30s weight=1;
        server task-service-2:5001 max_fails=3 fail_timeout=30s weight=1;
        
        # Configuración de keepalive para reutilizar conexiones
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Servidor HTTP - redirige a HTTPS
    server {
        listen 80;
        server_name allan.5furiosos.site;
        
        # Redirigir todo el tráfico HTTP a HTTPS
        return 301 https://allan.5furiosos.site$request_uri;
    }

    # Servidor HTTPS
    server {
        listen 443 ssl http2;
        server_name allan.5furiosos.site;
        root /usr/share/nginx/html;

        # Configuración SSL
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Configuración de logs con información de upstream
        log_format upstream_log '$remote_addr - $remote_user [$time_local] '
                               '"$request" $status $body_bytes_sent '
                               '"$http_referer" "$http_user_agent" '
                               'upstream_addr=$upstream_addr '
                               'upstream_status=$upstream_status '
                               'upstream_response_time=$upstream_response_time '
                               'request_time=$request_time';
        
        access_log /var/log/nginx/access.log upstream_log;
        error_log  /var/log/nginx/error.log warn;

        # Redirección /admin → /admin/
        location = /admin {
            return 301 /admin/;
        }

        # Servir archivos estáticos de /admin
        location /admin/ {
            limit_req zone=admin_limit burst=10 nodelay;
            alias /usr/share/nginx/html/admin/;
            index index.html;
            try_files $uri $uri/ /admin/index.html;

            # Configuración MIME types
            types {
                text/html html;
                text/css css;
                application/javascript js;
            }

            # Headers de seguridad
            add_header X-Content-Type-Options "nosniff";
            add_header X-Frame-Options "DENY";
            add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline'";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # API Users - ruta exacta sin barra
        location = /api/users {
            limit_req zone=api_limit burst=20 nodelay;
            
            # Configuración de proxy con load balancing
            proxy_pass http://user_service/users;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            
            # Timeouts optimizados para load balancing
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            
            # Manejo de errores
            proxy_intercept_errors on;
            error_page 502 503 504 = @api_error;
        }

        # API Users - todas las rutas que empiezan con /api/users/
        location /api/users/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            # Reescritura de URL
            rewrite ^/api/users/(.*)$ /users/$1 break;
            
            # Configuración de proxy con load balancing
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            
            # Timeouts optimizados para load balancing
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            
            # Manejo de errores
            proxy_intercept_errors on;
            error_page 502 503 504 = @api_error;
        }

        # API Tasks - ruta exacta sin barra
        location = /api/tasks {
            limit_req zone=api_limit burst=20 nodelay;
            
            # Configuración de proxy con load balancing
            proxy_pass http://task_service/tasks;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            
            # Timeouts optimizados para load balancing
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }

        # API Tasks - todas las rutas que empiezan con /api/tasks/
        location /api/tasks/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            # Reescritura de URL
            rewrite ^/api/tasks/?(.*)$ /tasks/$1 break;
            
            # Configuración de proxy con load balancing
            proxy_pass http://task_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            
            # Timeouts optimizados para load balancing
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Archivos estáticos
        location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|svg|woff2)$ {
            expires 30d;
            add_header Cache-Control "public";
            try_files $uri =404;
        }

        # Manejo de errores para APIs
        location @api_error {
            default_type application/json;
            return 503 '{"status":503,"message":"Service Temporarily Unavailable","timestamp":"$time_iso8601"}';
        }

        # Error page para rate limiting
        error_page 429 = @rate_limit_error;

        location @rate_limit_error {
            default_type application/json;
            return 429 '{"status":429,"message":"Too Many Requests","retry_after":"60","timestamp":"$time_iso8601"}';
        }

        # Ruta raíz
        location / {
            default_type application/json;
            return 404 '{"error": "Not Found", "endpoints": [
                "/api/users/",
                "/api/tasks/",
                "/admin/",
                "/health"
            ]}';
        }
    }
}